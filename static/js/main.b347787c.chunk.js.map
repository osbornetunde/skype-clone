{"version":3,"sources":["static-data.js","constants/action-types.js","reducers/index.js","reducers/user.js","reducers/contacts.js","reducers/activeUserId.js","reducers/messages.js","reducers/typing.js","reducers/activeMessageId.js","store/index.js","components/Empty.js","components/Header.js","components/Chats.js","actions/index.js","containers/MessageInput.js","components/ChatWindow.js","components/Main.js","containers/User.js","components/Sidebar.js","containers/App.js","serviceWorker.js","index.js"],"names":["numberOfUsers","shortid","require","txtgen","faker","_","users","Array","from","length","generateUser","contacts","mapKeys","getMessages","messagesPerUser","messages","forEach","user","numberOfMsgs","user_id","Object","objectSpread","v","i","number","text","sentence","is_user_msg","random","boolean","name","findName","email","internet","profile_pic","avatar","status","generate","SET_ACTIVE_USER_ID","SET_TYPING_VALUE","SEND_MESSAGE","EDIT_MESSAGE","DELETE_MESSAGE","combineReducers","state","arguments","undefined","activeUserId","action","type","payload","_action$payload","message","messageId","allUserMsg","keys","pop","console","log","defineProperty","concat","_action$payload2","message_Id","activeUser_Id","omit","typing","store","createStore","reducer","Empty","_ref","first_name","split","react_default","a","createElement","className","src","alt","Header","Chat","getState","onDoubleClick","dispatch","editMessage","bind","onClick","Chats","_ref2","chatRef","useRef","useEffect","scrollToBottom","current","scrollTop","scrollHeight","ref","map","Chats_Chat","key","MessageInput","value","onSubmit","e","preventDefault","_store$getState","sendMessage","onChange","target","placeholder","ChatWindow","activeUser","activeMessages","src_components_Header","src_components_Chats","values","src_containers_MessageInput","Main","src_components_ChatWindow","src_components_Empty","User","setActiveUserId","Sidebar","contact","src_containers_User","App","src_components_Sidebar","src_components_Main","Boolean","window","location","hostname","match","render","ReactDOM","src_containers_App","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b347787c.chunk.js","sourcesContent":["const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\n\nconst users = generateUsers(10);\nexport const contacts = _.mapKeys(users, \"user_id\");\nexport const getMessages = messagesPerUser => {\n  let messages = {};\n  _.forEach(users, user => {\n    messages[user.user_id] = {\n      ..._.mapKeys(generateMsgs(messagesPerUser), \"number\")\n    };\n  });\n  return messages;\n};\n\n// just an example of how the state object is structured\nexport const state = {\n  user: generateUser(),\n  messages: getMessages(10),\n  typing: \"\",\n  contacts,\n  activeUserId: null\n};\n\n/**\n * @returns {Object} - a new user object\n */\nexport function generateUser() {\n  return {\n    name: faker.name.findName(),\n    email: faker.internet.email(),\n    profile_pic: faker.internet.avatar(),\n    status: txtgen.sentence(),\n    user_id: shortid.generate()\n  };\n}\n/**\n * @returns {Object} - a new message object\n */\nfunction generateMsg(number) {\n  return {\n    number,\n    text: txtgen.sentence(),\n    is_user_msg: faker.random.boolean()\n  };\n}\n/**\n *\n * @param {Number} numberOfUsers - the number of users to be generated\n * @param {Function} generateUser - function that generates a single user\n * @returns {Array} - an array of user objects with length n = numberOfUsers\n */\nfunction generateUsers(numberOfUsers) {\n  return Array.from({ length: numberOfUsers }, () => generateUser());\n}\n\nfunction generateMsgs(numberOfMsgs) {\n  return Array.from({ length: numberOfMsgs }, (v, i) => generateMsg(i));\n}","export const SET_ACTIVE_USER_ID = \"SET_ACTIVE_USER_ID\";\nexport const SET_TYPING_VALUE = \"SET_TYPING_VALUE\";\nexport const SEND_MESSAGE = \"SEND_MESSAGE\";\nexport const EDIT_MESSAGE = \"EDIT_MESSAGE\";\nexport const DELETE_MESSAGE = \"DELETE_MESSAGE\";","import { combineReducers } from \"redux\";\nimport contacts from \"./contacts\";\nimport user from \"./user\";\nimport activeUserId from \"./activeUserId\";\nimport messages from \"./messages\";\nimport typing from \"./typing\";\nimport messageId from \"./activeMessageId\";\n\nexport default combineReducers({\n    user,\n    contacts,\n    activeUserId,\n    messages,\n    typing,\n    messageId\n})","import { generateUser } from \"../static-data\";\n\nexport default function user( state = generateUser(),  action) {\n    return state;\n}","import { contacts } from \"../static-data\";\n\nexport default (state = contacts , action) => {\n    return state;\n};","import { SET_ACTIVE_USER_ID } from \"../constants/action-types\";\n\nexport default function activeUserId( state = null, action) {\n    switch (action.type) {\n        case SET_ACTIVE_USER_ID:\n            return action.payload\n        \n        default:\n            return state;\n\n    }\n}","import { getMessages } from \"../static-data.js\";\nimport _ from \"lodash\";\nimport { SEND_MESSAGE, DELETE_MESSAGE } from \"../constants/action-types\";\n\nexport default function messages(state = getMessages(10), action){\n    switch (action.type) {\n        case SEND_MESSAGE:\n                const { message, activeUserId, messageId} = action.payload\n                const allUserMsg = state[activeUserId]\n                const number = messageId || +_.keys(allUserMsg).pop() + 1\n                console.log(allUserMsg);\n            return {\n                ...state,\n                [activeUserId]: {\n                    ...allUserMsg,\n                    [number]:{\n                        number,\n                        text: messageId ? `${message} (edited)` : message,\n                        is_user_msg: true\n                    }\n                }\n            };\n        case DELETE_MESSAGE:\n            const {message_Id, activeUser_Id} = action.payload\n            console.log(message_Id)\n            return {\n                ...state,\n                [activeUser_Id]: _.omit(state[activeUser_Id], message_Id)\n            };\n        default: \n            return state;\n    }\n} ","import { SET_TYPING_VALUE, SEND_MESSAGE, EDIT_MESSAGE } from \"../constants/action-types\";\n\n\nexport default function typing(state = \"\", action) {\n    switch(action.type){\n        case SET_TYPING_VALUE:\n            return action.payload;\n        case SEND_MESSAGE:\n            return \"\";\n        case EDIT_MESSAGE:\n            return action.payload.message\n        \n        default:\n            return state;\n    }\n}","import { EDIT_MESSAGE, DELETE_MESSAGE } from \"../constants/action-types\";\n\n\nexport default function setMessageId(state=\"null\", action) {\n    switch (action.type){\n        case EDIT_MESSAGE:\n            return action.payload.messageId;\n        case DELETE_MESSAGE:\n            return action.payload.message_Id;\n        \n        default:\n            return state;\n    }\n}","import { createStore } from \"redux\";\nimport reducer from \"../reducers/\";\n\nconst store = createStore(reducer);\n\nexport default store;","import React from \"react\";\nimport \"./Empty.css\";\n\nconst Empty = ({ user }) => {\n\n    const { name, profile_pic, status } = user;\n    const first_name = name.split(\" \")[0];\n\n    return (\n            <div className=\"Empty\">\n                <h1 className=\"Empty__name\">Welcome, {first_name}</h1>\n                <img src={profile_pic} alt={name} className=\"Empty__img\" />\n                <p className=\"Empty__status\">\n                    <b>Status:</b> {status}\n                </p>\n                <button className=\"Empty__btn\">Start a conversation</button>\n                <p className=\"Empty__info\">\n                    Search for someone to start chatting with or go to \n                    contacts to check who is available\n                </p>\n            </div>\n        )\n}\n\nexport default Empty;","import React from  \"react\";\nimport \"./Header.css\";\n\nconst Header = ({ user }) => {\n    \n    const { name, profile_pic, status} = user;\n    return (\n            <header className=\"Header\">\n                <div className=\"Header__details\">\n                    <img src={profile_pic} alt={name} className=\"Header__image\"/>\n                    <h1 className=\"Header__name\">{name}</h1> \n                </div>\n                <p className=\"Header__status\">{status}</p>\n               \n            </header>\n    )\n}\n\nexport default Header;","import React, { useEffect, useRef } from \"react\";\nimport \"./Chats.css\";\nimport store from \"../store\";\nimport { deleteMessage, editMessage } from \"../actions\";\n\nconst Chat = ({ message }) => {\n\n    const { activeUserId } = store.getState();\n\n    const { text, is_user_msg, number } = message;\n\n    const handleDeleteMessage = (number) => {\n        store.dispatch(deleteMessage(number, activeUserId))\n    }\n\n    const handleEditMessage = (number, text) => {\n        store.dispatch(editMessage(text, number, activeUserId))\n    }\n    return (\n    is_user_msg ?\n        <div \n            className=\"Chat is-user-msg\"\n            onDoubleClick={handleEditMessage.bind(null, number, text)}\n        >\n                <span \n                    className=\"close__btn\"\n                    onClick={handleDeleteMessage.bind(null, number)}\n                >\n                    X\n                </span>\n                {text}\n        </div> :\n        <div className=\"Chat\">{text}</div>\n    )\n}\n\nconst Chats = ({ messages }) => {\n\n    const chatRef = useRef();\n\n    useEffect(() => {\n        scrollToBottom()\n    })\n\n    useEffect(() => {\n        scrollToBottom()\n    }, []);\n\n    const scrollToBottom = () => {\n            chatRef.current.scrollTop = chatRef.current.scrollHeight;\n    }\n\n    return (\n        <div className=\"Chats\" ref={chatRef}>\n            {messages.map(message => (\n                <Chat message={message} key={message.number} />\n            ))}\n        </div>\n    )\n}\n\nexport default Chats;","import { SET_ACTIVE_USER_ID, SET_TYPING_VALUE, SEND_MESSAGE, DELETE_MESSAGE, EDIT_MESSAGE } from \"../constants/action-types\";\n\n\nexport const setActiveUserId = user_id => ({\n    type: SET_ACTIVE_USER_ID,\n    payload: user_id\n})\n\nexport const setTypingValue = value => ({\n    type: SET_TYPING_VALUE,\n    payload: value\n})\n\nexport const sendMessage = (message, activeUserId, messageId) => ({\n    type: SEND_MESSAGE,\n    payload: {\n        message,\n        activeUserId,\n        messageId\n    }\n})\n\nexport const deleteMessage = (message_Id, activeUser_Id) =>({\n    type: DELETE_MESSAGE,\n    payload: {\n        message_Id,\n        activeUser_Id\n    }\n})\n\nexport const editMessage = (message, messageId, activeUserId) => ({\n    type: EDIT_MESSAGE,\n    payload: {\n        message,\n        messageId,\n        activeUserId\n    }\n})","import React from \"react\";\nimport \"./MessageInput.css\";\nimport store from \"../store\";\nimport { setTypingValue, sendMessage } from \"../actions\";\n\nconst MessageInput = ({ value }) => {\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const { typing, activeUserId, messageId} = store.getState();\n        store.dispatch(sendMessage(typing, activeUserId, messageId))\n    }\n\n    const handleChange = e => {\n       \n        store.dispatch(setTypingValue(e.target.value))\n    }\n    return (\n        <form  className=\"Message\" onSubmit={handleSubmit}>\n            <input\n                className=\"Message__input\"\n                onChange={handleChange} \n                value={value}\n                placeholder=\"write a message\"\n            /> \n        </form>\n    )\n}\n\nexport default MessageInput;","import React from 'react'\nimport \"./ChatWindow.css\"\nimport store from \"../store\";\nimport Header from \"./Header\";\nimport Chats from \"../components/Chats\";\nimport _ from \"lodash\";\nimport MessageInput from '../containers/MessageInput';\n\n\nconst ChatWindow = ({ activeUserId }) => {\n\n  const state = store.getState();\n  const activeUser = state.contacts[activeUserId];\n  const activeMessages = state.messages[activeUserId];\n  const { typing } = state;\n  \n  return (\n    <div className=\"ChatWindow\">\n      <Header user={activeUser}/>\n      <Chats messages={_.values(activeMessages)} />\n      <MessageInput value={typing}/>\n    </div>\n  )\n}\n\nexport default ChatWindow;","import React from \"react\";\nimport \"./Main.css\";\nimport store from \"../store\";\nimport Empty from  \"./Empty\";\nimport ChatWindow from \"./ChatWindow\";\n\n\n\nconst Main = () => {\n\n    const { user, activeUserId } = store.getState();\n\n    const renderContent = () => {\n        if(!activeUserId){\n            return <Empty user={user} activeUserId={activeUserId}/>\n        } else {\n            return <ChatWindow  activeUserId={activeUserId}/>\n        }\n    }\n        return (\n            <main className=\"Main\">\n                {renderContent()}\n            </main>\n        )\n\n};\n\nexport default Main;","import React from 'react';\nimport \"./User.css\";\nimport store from \"../store\";\nimport { setActiveUserId } from \"../actions\";\n\nconst User = ({ user }) => {\n\n    const { name, profile_pic, status, user_id } = user;\n    const handleUserClick = () => {\n        \n        store.dispatch(setActiveUserId(user_id))\n    }\n    \n    return (\n        <div className=\"User\" onClick={handleUserClick}>\n            <img src={profile_pic} alt={name} className=\"User__pic\" />\n            <div className=\"User__details\">\n                <p className=\"User__details-name\">{name}</p>\n                <p className=\"User__details-status\">{status}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default User;","import React from \"react\";\nimport User from \"../containers/User\";\nimport \"./Sidebar.css\";\n\nconst Sidebar = ({ contacts }) => {\n\n    \n    return (\n        <aside className=\"Sidebar\">\n            {contacts.map(contact => <User user={contact} key={contact.user_id}/>)}\n        </aside>\n        )\n}\n\nexport default Sidebar;","import React from 'react';\nimport _ from \"lodash\";\nimport './App.css';\nimport Main from \"../components/Main\";\nimport Sidebar from \"../components/Sidebar\";\nimport store from \"../store\";\n\n\nconst App = () => {\n  \n  const { contacts, user, activeUserId } = store.getState();\n  \n    return (\n      <div className=\"App\">\n        <Sidebar contacts={_.values(contacts)}/>\n        <Main  user={user} activeUserId={activeUserId}/>\n      </div>\n    );\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\n\n\n\nconst render = () => {\n    fancyLog();\n    ReactDOM.render(<App />, document.getElementById('root'));\n}\n render();\n\n store.subscribe(render);\n\nserviceWorker.unregister();\n\nfunction fancyLog() {\n    console.log(\"%c Rendered with 👉 👉👇\", \"background: purple; color:#fff\")\n    console.log(store.getState());\n}\n"],"sourceRoot":""}